@model IEnumerable<MyWebApplication.GamingMachine>
@using PagedList.Mvc;

@{
	<!--
		Create variable to hold the casted version of our model,
		this is so we can keep the global version of the model as
		an IEnumerable and use .DisplayNameFor and the [Display]
		and [DisplayFormat] attributes
	-->
	var pagedlist = (PagedList.IPagedList)Model;
}

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

<table class="table">
	<tr>
		<th>
			@Html.ActionLink("Position", "Index", new { sortBy = TempData["PositionSortParam"], currentFilter = TempData["CurrentFilter"] })
		</th>
		<th>
			@Html.ActionLink("Name", "Index", new { sortBy = TempData["NameSortParam"], currentFilter = TempData["CurrentFilter"] })
		</th>
		<th>
			@Html.ActionLink("Serial", "Index", new { sortBy = TempData["SerialSortParam"], currentFilter = TempData["CurrentFilter"] })
		</th>
		<th>
			@Html.DisplayNameFor(model => model.CreatedAt)
		</th>
		<th>
			@Html.DisplayNameFor(model => model.IsDeleted)
		</th>
		<th>
			Actions
		</th>
	</tr>

	<tbody>
		@foreach (var item in Model)
		{
			<tr>
				<td>
					@Html.DisplayFor(model => item.MachinePosition)
				</td>
				<td>
					@Html.DisplayFor(model => item.Name)
				</td>
				<td>
					@Html.DisplayFor(model => item.SerialNumber)
				</td>
				<td>
					@Html.DisplayFor(model => item.CreatedAt)
				</td>
				<td>
					@Html.DisplayFor(model => item.IsDeleted)
				</td>

				<!-- Only render action controls if the item is not deleted -->
				@if (!item.IsDeleted)
				{
					<td>
						@Html.ActionLink("Edit", "Edit", new { serialNumber = item.SerialNumber }) |
						@Html.ActionLink("Delete", "Delete", new { serialNumber = item.SerialNumber })
					</td>
				}
			</tr>
		}
	</tbody>
</table>
<br />
Page @(pagedlist.PageCount < pagedlist.PageNumber ? 0 : pagedlist.PageNumber) of @pagedlist.PageCount

@Html.PagedListPager(pagedlist, page => Url.Action("Index", new { page, sortBy = TempData["CurrentSort"], currentFilter = TempData["CurrentFilter"] }))