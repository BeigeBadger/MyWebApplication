@model MyWebApplication.ViewModels.GamingMachineDeleteViewModel

@{
	ViewBag.Title = "Delete Page";

	var feedbackClasses = !TempData.ContainsKey("DeleteSucceeded")
		? ""
		: (bool)TempData["DeleteSucceeded"] ? "alert alert-success" : "alert alert-danger";
}

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		<h4>Delete @Model.Name</h4>

		<hr />

		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

		<div class="form-group">
			@Html.LabelFor(model => model.SerialNumber, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DisplayFor(model => model.SerialNumber, new { htmlAttributes = new { @class = "form-control" } })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DisplayFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DisplayFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.CreatedAt, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DisplayFor(model => model.CreatedAt, new { htmlAttributes = new { @class = "form-control" } })
			</div>
		</div>

		<div class="@feedbackClasses">
			<p>
				@(TempData.ContainsKey("DeleteResultMessage") ? TempData["DeleteResultMessage"].ToString() : "")
			</p>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Delete" id="btnDelete" class="btn btn-danger" />
			</div>
		</div>
	</div>
}

<div>
	@Html.ActionLink("Back to List", "Index")
</div>

<!--
	Render inside the scripts place holder section that lives in _Layout.cshtml,
	we do this so that our script is rendered/loaded AFTER we have included the
	libraries and thus we don't get errors when trying to use their functionality
-->
@section Scripts {
	@Scripts.Render("~/Scripts/jquery.validate.js")

	<script type="text/javascript">
			$(function () {
				// Handle clearing the filter
				$('#btnDelete').on('click', function (e) {
					var confirmed = confirm("This action cannot be undone! Are you sure that you want to delete this gaming machine?")

					if (confirmed)
					{
						// Call delete method
						window.location = '@Url.Action("Delete", "GamingMachines", new { serialNumber = Model.SerialNumber })'
					}
					else
					{
						// Stop submit action from bubbling up
						e.preventDefault();
					}
				});
			});
	</script>
}